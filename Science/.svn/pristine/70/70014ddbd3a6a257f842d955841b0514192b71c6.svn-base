/**
 * 
 */
package com.fujitsu.ttf.yd.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fujitsu.ttf.yd.entity.Collect;
import com.fujitsu.ttf.yd.entity.ThirdLevelDirectory;
import com.fujitsu.ttf.yd.service.CollectService;
import com.fujitsu.ttf.yd.service.ThirdLevelDirectoryService;
import com.fujitsu.ttf.yd.utils.Constants;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

/**
 * @author wuyu
 *
 */
@Api(value = "三级目录", tags = "三级目录")
@Controller
@RequestMapping("thirdLevel")
public class ThirdLevelDirectoryController {
	 
	 @Autowired
	 private ThirdLevelDirectoryService thirdLevelDirectoryService;
	 
	 @Autowired
	 private CollectService collectService;
	
	 @ApiOperation(value = "根据二级目录的id查询三级目录", notes = "")
	 @GetMapping("getAllThirdLevelDirectoryBySecondId")
	 @ResponseBody
	 @ApiImplicitParam(name = "Authorization", value = "Token", required = true, dataType = "String", paramType = "header")
     public Object getAllThirdLevelDirectoryBySecondId(Integer secondId,Integer page,Integer pageSize){
    	 return thirdLevelDirectoryService.getAllThirdLevelDirectoryBySecondId(secondId,page,pageSize);
     }
	 
	 @ApiOperation(value = "根据三级目录的名称查询三级目录(模糊查询)", notes = "")
	 @GetMapping("selectThirdLevelDirectoryByThirdName")
	 @ResponseBody
	 @ApiImplicitParam(name = "Authorization", value = "Token", required = true, dataType = "String", paramType = "header")
	 public Object selectThirdLevelDirectoryByThirdName(String thirdName,Integer page,Integer pageSize){
		 return thirdLevelDirectoryService.selectThirdLevelDirectoryByThirdName(thirdName,page,pageSize);
	 }
	 
	 @ApiOperation(value = "根据三级目录的名称获取单条记录", notes = "")
	 @GetMapping("selectDataByThirdName")
	 @ResponseBody
	 @ApiImplicitParam(name = "Authorization", value = "Token", required = true, dataType = "String", paramType = "header")
	 public ThirdLevelDirectory selectDataByThirdName(String thirdName) {
		 return thirdLevelDirectoryService.selectDataByThirdName(thirdName);
	 }
	 
	 @ApiOperation(value = "我的收藏", notes = "")
	 @GetMapping("selectCollectDirectory")
	 @ResponseBody
	 @ApiImplicitParam(name = "Authorization", value = "Token", required = true, dataType = "String", paramType = "header")
	 public Object selectCollectDirectory(String userId,Integer page,Integer pageSize,HttpServletRequest request){
		 userId=(String)request.getAttribute(Constants.HEADER_AUTHORIZATION);
		 return thirdLevelDirectoryService.selectCollectDirectory(userId,page,pageSize);
	 }
	 
	 @ApiOperation(value = "添加(取消)收藏", notes = "")
	 @GetMapping("insertCollect")
	 @ResponseBody
	 @ApiImplicitParam(name = "Authorization", value = "Token", required = true, dataType = "String", paramType = "header")
	 public String insertCollect(String userId, Integer thirdId,HttpServletRequest request) {
		 userId=(String)request.getAttribute(Constants.HEADER_AUTHORIZATION);
		 Collect collect = collectService.selectCollect(userId, thirdId);
		 if(collect==null) {
			 thirdLevelDirectoryService.insertCollect(userId, thirdId);
			 // 通过三级目录id获取该条记录
			 ThirdLevelDirectory thirdLevelDirectory = thirdLevelDirectoryService.selectThirdLevelDirectoryById(thirdId);
			 // 收藏量
			 Integer collectCount = thirdLevelDirectory.getCollectCount();
			 if(collectCount==null) {
				 collectCount=0;
			 }
			 collectCount++;
			 thirdLevelDirectoryService.updateData(thirdId, collectCount);
			 return "添加成功";
		 }else {
			 thirdLevelDirectoryService.deleteCollect(userId, thirdId);
			 ThirdLevelDirectory thirdLevelDirectory = thirdLevelDirectoryService.selectThirdLevelDirectoryById(thirdId);
			 Integer collectCount = thirdLevelDirectory.getCollectCount();
			 if(collectCount==null || collectCount==0) {
				 collectCount=0;
			 }else {
				 collectCount--;
			 }
			 thirdLevelDirectoryService.updateData(thirdId, collectCount);
			 return "删除成功";
		 }
		 
		 
	 }
}
