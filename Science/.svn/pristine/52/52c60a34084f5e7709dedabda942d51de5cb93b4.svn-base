package com.fujitsu.ttf.yd.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Stack;

import org.apache.commons.collections4.map.HashedMap;
import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fujitsu.ttf.yd.entity.Cover;
import com.fujitsu.ttf.yd.entity.Users;
import com.fujitsu.ttf.yd.mapper.CoverMapper;
import com.fujitsu.ttf.yd.service.PDFService;
import com.fujitsu.ttf.yd.service.UsersService;
import com.fujitsu.ttf.yd.utils.Constants;
import com.fujitsu.ttf.yd.utils.SendEmails;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfCopy;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;

/**
 * @author wuyu
 *
 */
@Service
public class PDFMergeServiceImpl implements PDFService {

	@Autowired
	CoverMapper coverMapper;
	
	@Autowired
	UsersService usersService; 

	@Override
	public void PDFMerge(List<String> list, String targetAddress,String handbookName,String token,String compony,String customer) {		
		PDDocument doc = null;
		// String workpath = "E:/test/";
		long currentTimeMillis = System.currentTimeMillis();
		// 实例化PDF工具类
		PDFMergerUtility mergerUtil = new PDFMergerUtility();
		// 设置合并后的文件
		mergerUtil.setDestinationFileName(Constants.MERGE_PATH+currentTimeMillis + ".pdf");
		File file2 = null;
		try {
			file2 = new File("/root/cover.pdf");
			// 添加要合并的封面
			mergerUtil.addSource(file2);
		} catch (Exception e2) {
			e2.printStackTrace();
		}
		for (int i = 0; i < list.size(); i++) {
			File file = new File(Constants.WORK_PATH + list.get(i));
			try {
				doc = PDDocument.load(file);
				// 添加要合并的文件
				mergerUtil.addSource(file);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// 合并
		try {
			mergerUtil.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				doc.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// 发送邮件
		//SendEmailUtils.sendEmail(currentTimeMillis, targetAddress,handbookName);
		try {
			SendEmails.sendEmail(currentTimeMillis, targetAddress, handbookName,token);
			
			 // 修改用户信息
			 Users user=new Users();
			 user.setOpenid(token);
			 user.setEmail(targetAddress);
			 user.setCompanyName(compony);
			 user.setContactPerson(customer);
			 user.setHandbookName(handbookName);
			 usersService.UpdateUsers(user);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void addMerge(String data, String fileOutPath,int id) {
		try {
			JSONObject obj = new JSONObject(data); 
			Stack<JSONObject> stObj = new Stack<JSONObject>(); 
			stObj.push(obj); 
			Map<String, Object> resultMap =new HashMap<String, Object>(); 
			JsonToMap(stObj,resultMap); 
            FileOutputStream out = new FileOutputStream(fileOutPath);// 输出流
            PdfReader reader = new PdfReader("/root/cover_end.pdf");// 读取pdf模板
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            PdfStamper stamper = new PdfStamper(reader, bos);
            stamper.setFormFlattening(true);
            AcroFields form = stamper.getAcroFields();
            form.setFieldProperty("bottom","bgcolor",new BaseColor(0,0,0),null);
            // 设置字体风格
            for (String key : resultMap.keySet()) {
                if(key.equals("title")) {
                	BaseFont bf= BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",BaseFont.EMBEDDED);
                	form.setFieldProperty("title","textfont",bf,null);
                	form.setFieldProperty("title","textcolor",new BaseColor(255,165,0),null);
                	form.setFieldProperty("title","textsize",(float)35,null);
                	form.setFieldProperty("title","bgcolor",new BaseColor(0,0,0),null);
                	form.setFieldProperty("title","bordercolor",new BaseColor(0,0,0),null);
                }else if(key.equals("compony")){
                	BaseFont bf= BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",BaseFont.EMBEDDED);
                	form.setFieldProperty("title","textsize",(float)17,null);
                	form.setFieldProperty("compony","textcolor",new BaseColor(255,255,255),null);
                	form.setFieldProperty("compony","textsize",(float)25,null);
                	form.setFieldProperty("compony","textfont",bf,null);
                	form.setFieldProperty("compony","bgcolor",new BaseColor(0,0,0),null);
                }
                else if(key.equals("customer")){
                	BaseFont bf= BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",BaseFont.EMBEDDED);
                	form.setFieldProperty("title","textsize",(float)17,null);
                	form.setFieldProperty("customer","textcolor",new BaseColor(255,255,255),null);
                	form.setFieldProperty("customer","textsize",(float)25,null);
                	form.setFieldProperty("customer","textfont",bf,null);
                	form.setFieldProperty("customer","bgcolor",new BaseColor(0,0,0),null);
                }
                String value = (String) resultMap.get(key);
                form.setField(key, value);
            }
            // 图片类的内容处理
            Map<String, String> imgmap=new HashedMap<>();
            // 根据路径读取图片
            Cover cover = coverMapper.getCoverById(id);
            imgmap.put("img", Constants.COVER_PATH+cover.getCoverName());
            for (String key : imgmap.keySet()) {
                String value = imgmap.get(key);
                String imgpath = value;
                int pageNo = form.getFieldPositions(key).get(0).page;
                Rectangle signRect = form.getFieldPositions(key).get(0).position;
                float x = signRect.getLeft();
                float y = signRect.getBottom();
                
                Image image = Image.getInstance(imgpath);
                // 获取图片页面
                PdfContentByte under = stamper.getOverContent(pageNo);
                // 图片大小自适应
                image.scaleToFit(signRect.getWidth(), signRect.getHeight());
                // 添加图片
                image.setAbsolutePosition(x, y);
                under.addImage(image);
            }
            stamper.setFormFlattening(true);// 如果为false，生成的PDF文件可以编辑，如果为true，生成的PDF文件不可以编辑
            stamper.close();
            Document doc = new Document();
            PdfCopy copy = new PdfCopy(doc, out);
            doc.open();
            int pageNum = reader.getNumberOfPages();
             for(int i = 1;i <= pageNum;i++){
                 PdfImportedPage importPage = copy.getImportedPage(new PdfReader(bos.toByteArray()), i);
                 copy.addPage(importPage);
             }
            doc.close();
        } catch (IOException e) {
            System.out.println(e);
        } catch (DocumentException e) {
            System.out.println(e);
        } catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @Author：sks
	 * @Description：把json对象数据存储在map以键值对的形式存储，只存储叶节点 @Date：
	 */
	private static void JsonToMap(Stack<JSONObject> stObj, Map<String, Object> resultMap) throws Exception {
		if (stObj == null && stObj.pop() == null) {
			return;
		}
		JSONObject json = stObj.pop();
		Iterator it = json.keys();
		while (it.hasNext()) {
			String key = (String) it.next();
			// 得到value的值
			Object value = json.get(key);
			// System.out.println(value);
			if (value instanceof JSONObject) {
				stObj.push((JSONObject) value);
				// 递归遍历
				JsonToMap(stObj, resultMap);
			} else {
				resultMap.put(key, value);
			}
		}
	}

}
